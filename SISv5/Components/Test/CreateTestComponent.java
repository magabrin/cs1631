import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.net.UnknownHostException;

public class CreateTestComponent
{

    // socket for connection to SISServer
    static Socket universal;
    private static int port = 53217;
    // message writer
    static MsgEncoder encoder;
    // message reader
    static MsgDecoder decoder;
    // scope of this component
    private static final String SCOPE = "SIS.Scope1";
	// name of this component
    private static final String NAME = "Test";
    // messages types that can be handled by this component
    private static final List<String> TYPES = new ArrayList<String>(
        Arrays.asList(new String[] { "Setting", "Confirm" }));

    private static int refreshRate = 500, max = 40, min = 15;
    private static Date startDate = new Date(), endDate = new Date();

    private static Timer timer = new Timer();

    // shared by all kinds of records that can be generated by this component
    private static KeyValueList record = new KeyValueList();
    // shared by all kinds of alerts that can be generated by this component
    private static KeyValueList alert = new KeyValueList();

    private static SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    /*
     * Main program
     */
    public static void main(String[] args)
    {
        while (true)
        {
            try
            {
                // try to establish a connection to SISServer
                universal = connect();
                // bind the message reader to inputstream of the socket
                decoder = new MsgDecoder(universal.getInputStream());
                // bind the message writer to outputstream of the socket
                encoder = new MsgEncoder(universal.getOutputStream());

                /*
                 * construct a Connect message to establish the connection
                 */
                KeyValueList conn = new KeyValueList();
                conn.putPair("Scope", SCOPE);
                conn.putPair("MessageType", "Connect");
				conn.putPair("Role", "Basic");
                conn.putPair("Name", NAME);
                encoder.sendMsg(conn);

                initRecord();

                testInitSuccess(universal, encoder, decoder);
                testInitFail(universal, encoder, decoder);
                break;
            }
            catch (Exception e)
            {
                // if anything goes wrong, try to re-establish the connection
                e.printStackTrace();
                try
                {
                    // wait for 1 second to retry
                    Thread.sleep(1000);
                }
                catch (InterruptedException e2)
                {
                }
                System.out.println("Try to reconnect");
                try
                {
                    universal = connect();
                }
                catch (IOException e1)
                {
                }
            }
        }
    }

    private static void testInitSuccess(Socket universal, MsgEncoder encoder, MsgDecoder decoder) throws Exception {
        // KeyValueList for inward messages, see KeyValueList for details
        KeyValueList kvList;
        try {

			if (universal == null) {
				universal = new Socket("127.0.0.1", port);
			}
			if (encoder == null) {
				encoder = new MsgEncoder(universal.getOutputStream());
			}

			KeyValueList init_kvl = new KeyValueList();
			init_kvl.putPair("Scope", "SIS.Scope1");
		    init_kvl.putPair("MessageType", "Setting");
			init_kvl.putPair("Sender", "Test");
			init_kvl.putPair("Receiver", "VotingComponent");
			init_kvl.putPair("Purpose", "Admin");
            init_kvl.putPair("Password", "ironman");
			init_kvl.putPair("CandidateList", "1;2;3;4;5");
			init_kvl.putPair("msgID", "703");
            encoder.sendMsg(init_kvl);
            
			// clearInit();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// clearInit();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// clearInit();
        }
        boolean go = true;
        while (go)
        {
            // attempt to read and decode a message, see MsgDecoder for details
            kvList = decoder.getMsg();
            // process that message
            boolean result = ProcessTestInitSuccess(kvList);
            if (result) {
                System.out.println("Breaking...");
                go = false;
                break;
            }
            
        }
    }

    private static boolean ProcessTestInitSuccess(KeyValueList kvList) {
        if (kvList != null) {
            String id = kvList.getValue("MsgID");
            String ack = kvList.getValue("AckMsgID");
            String yesno = kvList.getValue("YesNo");
            String name = kvList.getValue("Name");
            String rec = kvList.getValue("Receiver");
            String messType = kvList.getValue("MessageType");
            String scope = kvList.getValue("Scope");
            String sender = kvList.getValue("Sender");
    
            System.out.println("processTestinitSuccess kvList " + kvList.toString());

            if (id.equals("26") && ack.equals("703") && yesno.equals("Yes") && name.equals("VotingComponent") && rec.equals("GUI") && messType.equals("Reading") && scope.equals("SIS.Scope1") && sender.equals("VotingComponent") ) {
                System.out.println("Test Init Success PASS");
            }
            System.out.println("Test Init Success FAIL");
        }
        

        return true;
    }


    private static void testInitFail(Socket universal, MsgEncoder encoder, MsgDecoder decoder) throws Exception {
        // KeyValueList for inward messages, see KeyValueList for details
        KeyValueList kvList;
        try {

			if (universal == null) {
				universal = new Socket("127.0.0.1", port);
			}
			if (encoder == null) {
				encoder = new MsgEncoder(universal.getOutputStream());
			}

			KeyValueList init_kvl = new KeyValueList();
			init_kvl.putPair("Scope", "SIS.Scope1");
		    init_kvl.putPair("MessageType", "Setting");
			init_kvl.putPair("Sender", "Test");
			init_kvl.putPair("Receiver", "VotingComponent");
			init_kvl.putPair("Purpose", "Admin");
            init_kvl.putPair("Password", "treeHugger");
			init_kvl.putPair("CandidateList", "1;2;3;4;5");
			init_kvl.putPair("msgID", "703");
            encoder.sendMsg(init_kvl);
            
			// clearInit();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// clearInit();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// clearInit();
        }
        boolean go = true;
        while (go)
        {
            // attempt to read and decode a message, see MsgDecoder for details
            kvList = decoder.getMsg();
            // process that message
            boolean result = ProcessTestInitFail(kvList);
            if (result) {
                System.out.println("Breaking...");
                go = false;
                break;
            }
            
        }
    }

    private static boolean ProcessTestInitFail(KeyValueList kvList) {
        if (kvList != null) {
            String id = kvList.getValue("MsgID");
            String ack = kvList.getValue("AckMsgID");
            String yesno = kvList.getValue("YesNo");
            String name = kvList.getValue("Name");
            String rec = kvList.getValue("Receiver");
            String messType = kvList.getValue("MessageType");
            String scope = kvList.getValue("Scope");
            String sender = kvList.getValue("Sender");
    
            System.out.println("processTestIniitFail kvList: " + kvList.toString());

            if (id.equals("26") && ack.equals("703") && yesno.equals("No") && name.equals("VotingComponent") && rec.equals("GUI") && messType.equals("Reading") && scope.equals("SIS.Scope1") && sender.equals("VotingComponent") ) {
                System.out.println("Test Init fail PASS");
            }
            System.out.println("Test Init fail FAIL");
        }
        

        return true;
    }


    /*
     * used for connect(reconnect) to SISServer
     */
    static Socket connect() throws IOException
    {
        Socket socket = new Socket("127.0.0.1", port);
        return socket;
    }

    private static void initRecord()
    {
        record.putPair("Scope", SCOPE);
        record.putPair("MessageType", "Reading");
        record.putPair("Sender", NAME);
    }

    private static void ProcessMsg(KeyValueList kvList) throws Exception
    {
        String scope = kvList.getValue("Scope");
        if (!SCOPE.startsWith(scope))
        {
            return;
        }

        String messageType = kvList.getValue("MessageType");
        if (!TYPES.contains(messageType))
        {
            return;
        }

        String sender = kvList.getValue("Sender");
        String receiver = kvList.getValue("Receiver");
        String purpose = kvList.getValue("Purpose");

        switch (messageType)
        {
        case "Confirm":
            System.out.println("Connect to SISServer successful.");
            break;
        case "Setting":
            if (receiver.equals(NAME))
            {
                System.out.println("Message from " + sender);
                System.out.println("Message type: " + messageType);
                System.out.println("Message Purpose: " + purpose);                
                switch (purpose)
                {

                case "Activate":
                    // String rRate = kvList.getValue("RefreshRate");
                    // String sDate = kvList.getValue("StartDate");
                    // String eDate = kvList.getValue("EndDate");
                    // String maxx = kvList.getValue("Max");
                    // String minn = kvList.getValue("Min");

                    // successful vote
                    // out.putPair("MsgID", "711");
                    // out.putPair("Status","3");
                    // out.putPair("Receiver", "GUI");
                    // out.putPair("MessageType", "Reading");
                    // out.putPair("Scope", "SIS.Scope1");
                    // out.putPair("Sender", NAME);
                    // encoder.sendMsg(out);

                    // // vote fails b/c of voteId not in table
                    // out.putPair("MsgID", "711");
                    // out.putPair("Status","2");
                    // out.putPair("Receiver", "GUI");
                    // out.putPair("MessageType", "Reading");
                    // out.putPair("Scope", "SIS.Scope1");
                    // out.putPair("Sender", NAME);

                    // // vote fails b/c of email already voted
                    // out.putPair("MsgID", "711");
                    // out.putPair("Status","1");
                    // out.putPair("Receiver", "GUI");
                    // out.putPair("MessageType", "Reading");
                    // out.putPair("Scope", "SIS.Scope1");
                    // out.putPair("Sender", NAME);

                    // // show report
                    // out.putPair("MsgID", "712");
                    // out.putPair("RankedReport", rankedReport);
                    // out.putPair("Receiver", "GUI");
                    // out.putPair("MessageType", "Reading");
                    // out.putPair("Scope", "SIS.Scope1");
                    // out.putPair("Sender", NAME);

                    // // show report fails becaseu of invalid password
                    // out.putPair("RankedReport", "null");
                    // out.putPair("Receiver", "GUI");
                    // out.putPair("MessageType", "Reading");
                    // out.putPair("Scope", "SIS.Scope1");
                    // out.putPair("Sender", NAME);

                    // // successful init
                    // out.putPair("MsgID", "26");
                    // out.putPair("AckMsgID", "703");
                    // out.putPair("YesNo", "Yes");
                    // out.putPair("Name", NAME);
                    // out.putPair("Receiver", "GUI");
                    // out.putPair("MessageType", "Reading");
                    // out.putPair("Scope", "SIS.Scope1");
                    // out.putPair("Sender", NAME);

                    // // unsuccessful init because password incorrect
                    // out.putPair("MsgID", "26");
                    // out.putPair("AckMsgID", "703");
                    // out.putPair("YesNo", "No");
                    // out.putPair("Name", NAME);
                    // out.putPair("Receiver", "GUI");
                    // out.putPair("MessageType", "Reading");
                    // out.putPair("Scope", "SIS.Scope1");
                    // out.putPair("Sender", NAME);



                    System.out.println("Algorithm Activated");
                    break;

                case "Kill":                    
                    System.exit(0);
                    break;

                case "Deactivate":                    
                    System.out.println("Algorithm Deactivated");
                    break;
                }
            }
            break;
        }
    }

}

