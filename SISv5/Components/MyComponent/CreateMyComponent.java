import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

public class CreateMyComponent
{

    // socket for connection to SISServer
    static Socket universal;
    private static int port = 53217;
    // message writer
    static MsgEncoder encoder;
    // message reader
    static MsgDecoder decoder;
    // scope of this component
    private static final String SCOPE = "SIS.Scope1";
	// name of this component
    private static final String NAME = "Vote";
    // messages types that can be handled by this component
    private static final List<String> TYPES = new ArrayList<String>(Arrays.asList(new String[] { "Setting", "Confirm" }));


    private static Timer timer = new Timer();

    // shared by all kinds of records that can be generated by this component
    private static KeyValueList record = new KeyValueList();
    // shared by all kinds of alerts that can be generated by this component
    private static KeyValueList alert = new KeyValueList();

    /*
     * Main program
     */
    public static void main(String[] args)
    {
        while (true)
        {
            try
            {
                // try to establish a connection to SISServer
                universal = connect();
                // bind the message reader to inputstream of the socket
                decoder = new MsgDecoder(universal.getInputStream());
                // bind the message writer to outputstream of the socket
                encoder = new MsgEncoder(universal.getOutputStream());

                /* construct a Connect message to establish the connection */
                KeyValueList conn = new KeyValueList();
                conn.putPair("Scope", SCOPE);
                conn.putPair("MessageType", "Connect");
				conn.putPair("Role", "Basic");
                conn.putPair("Name", NAME);
                encoder.sendMsg(conn);

                initRecord();

                // KeyValueList for inward messages, see KeyValueList for details
                KeyValueList kvList;

                while (true)
                {
                    // attempt to read and decode a message, see MsgDecoder for details
                    kvList = decoder.getMsg();
                    // process that message
                    ProcessMsg(kvList);
                }
            }
            catch (Exception e)
            {
                // if anything goes wrong, try to re-establish the connection
                e.printStackTrace();
                try
                {
                    // wait for 1 second to retry
                    Thread.sleep(1000);
                }
                catch (InterruptedException e2)
                {
                }
                System.out.println("Try to reconnect");
                try
                {
                    universal = connect();
                }
                catch (IOException e1)
                {
                }
            }
        }
    }

    /*
     * used for connect(reconnect) to SISServer
     */
    static Socket connect() throws IOException
    {
        Socket socket = new Socket("127.0.0.1", port);
        return socket;
    }

    private static void initRecord()
    {
        record.putPair("Scope", SCOPE);
        record.putPair("MessageType", "Voting");
        record.putPair("Sender", NAME);

        // Receiver may be different for each message, so it doesn't make sense
        // to set here
        // record.putPair("Receiver", "");

        alert.putPair("Scope", SCOPE);
        alert.putPair("MessageType", "Alert");
        alert.putPair("Sender", NAME);
        alert.putPair("Purpose", "MyComponentAlert");

        // Receiver may be different for each message, so it doesn't make sense
        // to set here
        // alert.putPair("Receiver", "");
    }

    private static void componentTask(String incomingVote)
    {
        try
        {   
            /** store data */
            System.out.println("In componentTask method, incomingVote = " + incomingVote);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    private static void ProcessMsg(KeyValueList kvList) throws Exception
    {
        String scope = kvList.getValue("Scope");
        if (!SCOPE.startsWith(scope))
        {
            return;
        }

        String messageType = kvList.getValue("MessageType");
        if (!TYPES.contains(messageType))
        {
            return;
        }

        String sender = kvList.getValue("Sender");

        String receiver = kvList.getValue("Receiver");

        String purpose = kvList.getValue("Purpose");

        switch (messageType)
        {
        case "Confirm":
            System.out.println("Connect to SISServer successful.");
            break;
        case "Setting":
            if (receiver.equals(NAME))
            {
                System.out.println("Message from " + sender);
                System.out.println("Message type: " + messageType);
                System.out.println("Message Purpose: " + purpose);
                switch (purpose)
                {
                case "Activate":
                    String incomingVote = kvList.getValue("id");
                    componentTask(incomingVote);
                    System.out.println("Algorithm Activated");
                    break;

                case "Kill":
                    try
                    {
                        timer.cancel();
                    }
                    catch (Exception e)
                    {
                        // TODO: handle exception
                    }
                    System.exit(0);
                    break;

                case "Deactivate":
                    try
                    {
                        timer.cancel();
                    }
                    catch (Exception e)
                    {
                        // TODO: handle exception
                    }
                    System.out.println("Algorithm Deactivated");
                    break;
                }
            }
            break;
        }
    }


}

